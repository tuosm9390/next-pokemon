import Card from '@/components/Card';
import styles from '@/styles/Home.module.css';
import { getAllPokemon } from '@/utils/getPokemonData';
import Input from '@mui/joy/Input';
import Head from 'next/head';
import { useEffect } from 'react';
import { useInView } from 'react-intersection-observer';
import { useInfiniteQuery } from 'react-query';

export default function Home() {
  const [ref, inView] = useInView();

  const { data, isLoading, hasNextPage, fetchNextPage, isFetchingNextPage } =
    useInfiniteQuery({
      queryKey: ['getAllPokemon'],
      queryFn: getAllPokemon,
      getNextPageParam: result => {
        const nextpage = result.next;
        if (!nextpage) return false;

        return Number(new URL(nextpage).searchParams.get('offset'));
      },
    });

  useEffect(() => {
    if (inView) {
      fetchNextPage();
    }
  }, [fetchNextPage, inView]);

  return (
    !isLoading && (
      <>
        <Head>
          <title>POKE API</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <Input
          placeholder="포켓몬 이름을 검색하세요."
          sx={{ marginBottom: '30px', width: '20%' }}
        />
        <div className={styles.cardWrapper}>
          {data?.pages.map(page =>
            page.results.map((item, index) => {
              return <Card item={item} key={index} />;
            }),
          )}
        </div>
        <div className={styles.notification}>
          {isFetchingNextPage && hasNextPage && !isLoading
            ? 'Loading...'
            : 'No search left'}
        </div>

        <div className={styles.observe} ref={ref}></div>
      </>
    )
  );
}
