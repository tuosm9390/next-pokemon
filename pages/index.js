import Card from '@/components/Card';
import styles from '@/styles/Home.module.css';
import { getAllPokemon, getSearchPokemon } from '@/utils/getPokemonData';
import Input from '@mui/joy/Input';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { useInView } from 'react-intersection-observer';
import { useInfiniteQuery } from 'react-query';

export default function Home() {
  const [ref, inView] = useInView();
  const [searchName, setSearchName] = useState('');

  const { data, isLoading, hasNextPage, fetchNextPage, isFetchingNextPage } =
    useInfiniteQuery({
      queryKey: ['getAllPokemon', searchName],
      queryFn:
        searchName === '' ? getAllPokemon : () => getSearchPokemon(searchName),
      getNextPageParam: result => {
        const nextpage = result.next;
        if (!nextpage) return false;

        return Number(new URL(nextpage).searchParams.get('offset'));
      },
      // searchName이 바뀔 때마다 쿼리를 새로고침
      enabled: !!searchName || searchName === '',
    });

  useEffect(() => {
    if (inView) {
      fetchNextPage();
    }
  }, [fetchNextPage, inView]);

  return (
    <>
      <Head>
        <title>POKE API</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Input
        placeholder="포켓몬 이름을 검색하세요."
        sx={{ marginBottom: '30px', width: '20%' }}
        onChange={e => setSearchName(e.target.value)}
      />
      <div className={styles.cardWrapper}>
        {searchName === '' &&
          data?.pages?.map(page =>
            page.results.map((item, index) => {
              return <Card item={item} key={index} />;
            }),
          )}
        {searchName !== '' &&
          data?.pages?.map((item, index) => {
            // console.log({
            //   name: searchName,
            //   url: `https://pokeapi.co/api/v2/pokemon/${searchName}`,
            // }),
            return (
              <Card
                item={{
                  name: searchName,
                  url: `https://pokeapi.co/api/v2/pokemon/${searchName}`,
                }}
                key={index}
              />
            );
          })}
      </div>
      <div className={styles.notification}>
        {isFetchingNextPage && hasNextPage && !isLoading
          ? 'Loading...'
          : 'No search left'}
      </div>

      <div className={styles.observe} ref={ref}></div>
    </>
  );
}
