import Card from '@/components/Card';
import styles from '@/styles/Home.module.css';
import { getAllPokemon, getSearchPokemon } from '@/utils/getPokemonData';
import { Button } from '@mui/joy';
import Input from '@mui/joy/Input';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { useInView } from 'react-intersection-observer';
import { useInfiniteQuery, useMutation, useQueryClient } from 'react-query';

export default function Home() {
  const [ref, inView] = useInView();
  const [searchName, setSearchName] = useState('');
  const queryClient = useQueryClient();

  const {
    data,
    isLoading,
    hasNextPage,
    fetchNextPage,
    isFetchingNextPage,
    refetch,
  } = useInfiniteQuery({
    queryKey: ['getAllPokemon', searchName],
    queryFn: ({ pageParam = 0 }) => getAllPokemon({ pageParam, searchName }), // pageParam을 포함하여 호출
    getNextPageParam: result => {
      const nextPage = result.next;
      if (!nextPage) return false;

      return Number(new URL(nextPage).searchParams.get('offset'));
    },
    refetchOnWindowFocus: false,
  });

  useEffect(() => {
    if (inView) {
      fetchNextPage();
    }
  }, [fetchNextPage, inView]);

  return (
    <>
      <Head>
        <title>POKE API</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Input
        placeholder="포켓몬 번호를 검색하세요."
        sx={{ marginBottom: '30px', width: '20%' }}
        onChange={e => setSearchName(e.target.value)}
      />
      <div className={styles.cardWrapper}>
        {searchName == '' &&
          data?.pages?.map(page =>
            page?.results?.map((item, index) => {
              return <Card item={item} key={index} />;
            }),
          )}
        <Card
          item={{
            name: searchName,
            url: `https://pokeapi.co/api/v2/pokemon/${searchName}`,
          }}
        />
      </div>
      <div className={styles.notification}>
        {isFetchingNextPage && !isLoading
          ? 'Loading...'
          : (!isFetchingNextPage || isLoading) && !hasNextPage
          ? 'No search left'
          : null}
      </div>

      <div className={styles.observe} ref={ref}></div>
    </>
  );
}
